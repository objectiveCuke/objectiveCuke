<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>PureMVC Objective-C: Facade Class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li class="current"><a href="annotated.html"><span>Classes</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.html"><span>Class&nbsp;List</span></a></li>
      <li><a href="hierarchy.html"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.html"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="contents">
<h1>Facade Class Reference</h1><!-- doxytag: class="Facade" --><!-- doxytag: inherits="IFacade-p" --><code>#import &lt;Facade.h&gt;</code>
<p>
Inherits <a class="el" href="protocol_i_facade-p.html">IFacade-p</a>.
<p>

<p>
<a href="class_facade-members.html">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">(id)&nbsp;</td><td class="memItemRight" valign="bottom">- <a class="el" href="interface_facade.html#8775b3dc089e76b4f36ca65557973ae1">init</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">(void)&nbsp;</td><td class="memItemRight" valign="bottom">- <a class="el" href="interface_facade.html#9b3baa74217ad2b58a66b36f46c899f3">initializeFacade</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">(void)&nbsp;</td><td class="memItemRight" valign="bottom">- <a class="el" href="interface_facade.html#90a6aaf2e117d6be41977192c5d169fc">initializeController</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">(void)&nbsp;</td><td class="memItemRight" valign="bottom">- <a class="el" href="interface_facade.html#62c7ff60891c00e2271a9ab5ab3640ab">initializeView</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">(void)&nbsp;</td><td class="memItemRight" valign="bottom">- <a class="el" href="interface_facade.html#a9d0e1781ad74fd5fb7fd19f473514fb">initializeModel</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">(void)&nbsp;</td><td class="memItemRight" valign="bottom">- <a class="el" href="interface_facade.html#b2068fe1dd7fc7dedc28959a66ec0847">sendNotification:body:type:</a><code> [implementation]</code></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">(BOOL)&nbsp;</td><td class="memItemRight" valign="bottom">- <a class="el" href="interface_facade.html#1d72cdd5a3aa29288b7a09f3329ec3ac">hasCommand:</a><code> [implementation]</code></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">(BOOL)&nbsp;</td><td class="memItemRight" valign="bottom">- <a class="el" href="interface_facade.html#869753c3881ffa2047caf6b2e12ca807">hasMediator:</a><code> [implementation]</code></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">(BOOL)&nbsp;</td><td class="memItemRight" valign="bottom">- <a class="el" href="interface_facade.html#c2ab2b100c712f5a772c31fa70456197">hasProxy:</a><code> [implementation]</code></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">(void)&nbsp;</td><td class="memItemRight" valign="bottom">- <a class="el" href="interface_facade.html#d3b3b3839432647aa86026577ae0efd0">notifyObservers:</a><code> [implementation]</code></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">(void)&nbsp;</td><td class="memItemRight" valign="bottom">- <a class="el" href="interface_facade.html#e1d4d017b64744de82d85e551ecfb340">registerCommand:commandClassRef:</a><code> [implementation]</code></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">(void)&nbsp;</td><td class="memItemRight" valign="bottom">- <a class="el" href="interface_facade.html#cb4b5c4222437ea76e720101d9cb12df">registerMediator:</a><code> [implementation]</code></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">(void)&nbsp;</td><td class="memItemRight" valign="bottom">- <a class="el" href="interface_facade.html#d08390fb9b60cc4d05dc85556be85767">registerProxy:</a><code> [implementation]</code></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">(void)&nbsp;</td><td class="memItemRight" valign="bottom">- <a class="el" href="interface_facade.html#ac5e7fb0acbdad2a75fbe19745f00676">removeCommand:</a><code> [implementation]</code></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">(id&lt; <a class="el" href="protocol_i_mediator-p.html">IMediator</a> &gt;)&nbsp;</td><td class="memItemRight" valign="bottom">- <a class="el" href="interface_facade.html#1df21bff69bed012051b81fcb638119b">removeMediator:</a><code> [implementation]</code></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">(id&lt; <a class="el" href="protocol_i_proxy-p.html">IProxy</a> &gt;)&nbsp;</td><td class="memItemRight" valign="bottom">- <a class="el" href="interface_facade.html#8f32cc6b51ccfd15cf6a3951c3af7043">removeProxy:</a><code> [implementation]</code></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">(id&lt; <a class="el" href="protocol_i_mediator-p.html">IMediator</a> &gt;)&nbsp;</td><td class="memItemRight" valign="bottom">- <a class="el" href="interface_facade.html#86903ee1846ffa6851d2a874690a2230">retrieveMediator:</a><code> [implementation]</code></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">(id&lt; <a class="el" href="protocol_i_proxy-p.html">IProxy</a> &gt;)&nbsp;</td><td class="memItemRight" valign="bottom">- <a class="el" href="interface_facade.html#4d6b640aa7b65d22571ca8d6ffbf6c50">retrieveProxy:</a><code> [implementation]</code></td></tr>

<tr><td colspan="2"><br><h2>Static Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">(id&lt; <a class="el" href="protocol_i_facade-p.html">IFacade</a> &gt;)&nbsp;</td><td class="memItemRight" valign="bottom">+ <a class="el" href="interface_facade.html#af5f6929543fcbbb0ecea1b560a0e032">getInstance</a></td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
A base Singleton <code><a class="el" href="protocol_i_facade-p.html">IFacade</a></code> implementation.<p>
In PureMVC, the <code><a class="el" href="interface_facade.html">Facade</a></code> class assumes these responsibilities: <ul>
<li>
Initializing the <code><a class="el" href="interface_model.html">Model</a></code>, <code><a class="el" href="interface_view.html">View</a></code> and <code><a class="el" href="interface_controller.html">Controller</a></code> Singletons. </li>
<li>
Providing all the methods defined by the <code><a class="el" href="protocol_i_model-p.html">IModel</a>, <a class="el" href="protocol_i_view-p.html">IView</a>, &amp; <a class="el" href="protocol_i_controller-p.html">IController</a></code> interfaces. </li>
<li>
Providing the ability to override the specific <code><a class="el" href="interface_model.html">Model</a></code>, <code><a class="el" href="interface_view.html">View</a></code> and <code><a class="el" href="interface_controller.html">Controller</a></code> Singletons created. </li>
<li>
Providing a single point of contact to the application for registering <code>Commands</code> and notifying <code>Observers</code> </li>
</ul>
<p>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="interface_model.html">Model</a>, <a class="el" href="interface_view.html">View</a>, <a class="el" href="interface_controller.html">Controller</a>, <a class="el" href="interface_notification.html">Notification</a>, <a class="el" href="interface_mediator.html">Mediator</a>, <a class="el" href="interface_proxy.html">Proxy</a>, <a class="el" href="interface_simple_command.html">SimpleCommand</a>, <a class="el" href="interface_macro_command.html">MacroCommand</a> </dd></dl>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="af5f6929543fcbbb0ecea1b560a0e032"></a><!-- doxytag: member="Facade::getInstance" ref="af5f6929543fcbbb0ecea1b560a0e032" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">+ (id&lt; <a class="el" href="protocol_i_facade-p.html">IFacade</a> &gt;) getInstance           </td>
          <td></td>
          <td class="paramname">          </td>
          <td>&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<a class="el" href="interface_facade.html">Facade</a> Singleton Factory method<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the Singleton instance of the <a class="el" href="interface_facade.html">Facade</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="1d72cdd5a3aa29288b7a09f3329ec3ac"></a><!-- doxytag: member="Facade::hasCommand:" ref="1d72cdd5a3aa29288b7a09f3329ec3ac" args="(NSString *notificationName)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">- (BOOL) hasCommand:           </td>
          <td></td>
          <td class="paramtype">(NSString *)&nbsp;</td>
          <td class="paramname"> <em>notificationName</em>          </td>
          <td>&nbsp;</td>
          <td><code> [implementation]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Check if a Command is registered for a given <a class="el" href="interface_notification.html">Notification</a><p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>notificationName</em>&nbsp;</td><td></td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>whether a Command is currently registered for the given <code>notificationName</code>. </dd></dl>

<p>Reimplemented from <a class="el" href="protocol_i_facade-p.html#cd33fa21eeb324c55966d50d29729a97">&lt; IFacade &gt;</a>.</p>

</div>
</div><p>
<a class="anchor" name="869753c3881ffa2047caf6b2e12ca807"></a><!-- doxytag: member="Facade::hasMediator:" ref="869753c3881ffa2047caf6b2e12ca807" args="(NSString *mediatorName)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">- (BOOL) hasMediator:           </td>
          <td></td>
          <td class="paramtype">(NSString *)&nbsp;</td>
          <td class="paramname"> <em>mediatorName</em>          </td>
          <td>&nbsp;</td>
          <td><code> [implementation]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Check if a <a class="el" href="interface_mediator.html">Mediator</a> is registered or not<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>mediatorName</em>&nbsp;</td><td></td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>whether a <a class="el" href="interface_mediator.html">Mediator</a> is registered with the given <code>mediatorName</code>. </dd></dl>

<p>Reimplemented from <a class="el" href="protocol_i_facade-p.html#51cc9b8865d9f8a1c0675aea0e6542b1">&lt; IFacade &gt;</a>.</p>

</div>
</div><p>
<a class="anchor" name="c2ab2b100c712f5a772c31fa70456197"></a><!-- doxytag: member="Facade::hasProxy:" ref="c2ab2b100c712f5a772c31fa70456197" args="(NSString *proxyName)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">- (BOOL) hasProxy:           </td>
          <td></td>
          <td class="paramtype">(NSString *)&nbsp;</td>
          <td class="paramname"> <em>proxyName</em>          </td>
          <td>&nbsp;</td>
          <td><code> [implementation]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Check if a <a class="el" href="interface_proxy.html">Proxy</a> is registered<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>proxyName</em>&nbsp;</td><td></td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>whether a <a class="el" href="interface_proxy.html">Proxy</a> is currently registered with the given <code>proxyName</code>. </dd></dl>

<p>Reimplemented from <a class="el" href="protocol_i_facade-p.html#3bfad8668dc24507d9a6f4b2b3b3c4c2">&lt; IFacade &gt;</a>.</p>

</div>
</div><p>
<a class="anchor" name="8775b3dc089e76b4f36ca65557973ae1"></a><!-- doxytag: member="Facade::init" ref="8775b3dc089e76b4f36ca65557973ae1" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">- (id) init           </td>
          <td></td>
          <td class="paramname">          </td>
          <td>&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Constructor.<p>
This <code><a class="el" href="protocol_i_facade-p.html">IFacade</a></code> implementation is a Singleton, so you should not call the constructor directly, but instead call the static Singleton Factory method <code>[<a class="el" href="interface_facade.html">Facade</a> getInstance]</code><p>
<dl compact><dt><b>Exceptions:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>NSException</em>&nbsp;</td><td>if Singleton instance has already been constructed </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="90a6aaf2e117d6be41977192c5d169fc"></a><!-- doxytag: member="Facade::initializeController" ref="90a6aaf2e117d6be41977192c5d169fc" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">- (void) initializeController           </td>
          <td></td>
          <td class="paramname">          </td>
          <td>&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Initialize the <code><a class="el" href="interface_controller.html">Controller</a></code>.<p>
Called by the <code>initializeFacade</code> method. Override this method in your subclass of <code><a class="el" href="interface_facade.html">Facade</a></code> if one or both of the following are true: <ul>
<li>
You wish to initialize a different <code><a class="el" href="protocol_i_controller-p.html">IController</a></code>. </li>
<li>
You have <code>Commands</code> to register with the <code><a class="el" href="interface_controller.html">Controller</a></code> at startup..  </li>
</ul>
If you don't want to initialize a different <code><a class="el" href="protocol_i_controller-p.html">IController</a></code>, call <code>[super initializeController]</code> at the beginning of your method, then register <code>Command</code>s.  
</div>
</div><p>
<a class="anchor" name="9b3baa74217ad2b58a66b36f46c899f3"></a><!-- doxytag: member="Facade::initializeFacade" ref="9b3baa74217ad2b58a66b36f46c899f3" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">- (void) initializeFacade           </td>
          <td></td>
          <td class="paramname">          </td>
          <td>&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Initialize the Singleton <code><a class="el" href="interface_facade.html">Facade</a></code> instance.<p>
Called automatically by the constructor. Override in your subclass to do any subclass specific initializations. Be sure to call <code>[super initializeFacade]</code>, though. 
</div>
</div><p>
<a class="anchor" name="a9d0e1781ad74fd5fb7fd19f473514fb"></a><!-- doxytag: member="Facade::initializeModel" ref="a9d0e1781ad74fd5fb7fd19f473514fb" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">- (void) initializeModel           </td>
          <td></td>
          <td class="paramname">          </td>
          <td>&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Initialize the <code><a class="el" href="interface_model.html">Model</a></code>.<p>
Called by the <code>initializeFacade</code> method. Override this method in your subclass of <code><a class="el" href="interface_facade.html">Facade</a></code> if one or both of the following are true: <ul>
<li>
You wish to initialize a different <code><a class="el" href="protocol_i_model-p.html">IModel</a></code>. </li>
<li>
You have <code><a class="el" href="interface_proxy.html">Proxy</a></code>s to register with the <a class="el" href="interface_model.html">Model</a> that do not retrieve a reference to the <a class="el" href="interface_facade.html">Facade</a> at construction time. </li>
</ul>
If you don't want to initialize a different <code><a class="el" href="protocol_i_model-p.html">IModel</a></code>, call <code>[super initializeModel]</code> at the beginning of your method, then register <code><a class="el" href="interface_proxy.html">Proxy</a></code>s. <p>
Note: This method is <em>rarely</em> overridden; in practice you are more likely to use a <code>Command</code> to create and register <code><a class="el" href="interface_proxy.html">Proxy</a></code>s with the <code><a class="el" href="interface_model.html">Model</a></code>, since <code><a class="el" href="interface_proxy.html">Proxy</a></code>s with mutable data will likely need to send <code><a class="el" href="protocol_i_notification-p.html">INotification</a></code>s and thus will likely want to fetch a reference to the <code><a class="el" href="interface_facade.html">Facade</a></code> during their construction.  
</div>
</div><p>
<a class="anchor" name="62c7ff60891c00e2271a9ab5ab3640ab"></a><!-- doxytag: member="Facade::initializeView" ref="62c7ff60891c00e2271a9ab5ab3640ab" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">- (void) initializeView           </td>
          <td></td>
          <td class="paramname">          </td>
          <td>&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Initialize the <code><a class="el" href="interface_view.html">View</a></code>.<p>
Called by the <code>initializeFacade</code> method. Override this method in your subclass of <code><a class="el" href="interface_facade.html">Facade</a></code> if one or both of the following are true: <ul>
<li>
You wish to initialize a different <code><a class="el" href="protocol_i_view-p.html">IView</a></code>. </li>
<li>
You have <code>Observers</code> to register with the <code><a class="el" href="interface_view.html">View</a></code> </li>
</ul>
If you don't want to initialize a different <code><a class="el" href="protocol_i_view-p.html">IView</a></code>, call <code>[super initializeView]</code> at the beginning of your method, then register <code><a class="el" href="protocol_i_mediator-p.html">IMediator</a></code> instances. <p>
Note: This method is <em>rarely</em> overridden; in practice you are more likely to use a <code>Command</code> to create and register <code><a class="el" href="interface_mediator.html">Mediator</a></code>s with the <code><a class="el" href="interface_view.html">View</a></code>, since <code><a class="el" href="protocol_i_mediator-p.html">IMediator</a></code> instances will need to send <code><a class="el" href="protocol_i_notification-p.html">INotification</a></code>s and thus will likely want to fetch a reference to the <code><a class="el" href="interface_facade.html">Facade</a></code> during their construction.  
</div>
</div><p>
<a class="anchor" name="d3b3b3839432647aa86026577ae0efd0"></a><!-- doxytag: member="Facade::notifyObservers:" ref="d3b3b3839432647aa86026577ae0efd0" args="(id&lt; INotification &gt; notification)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">- (void) notifyObservers:           </td>
          <td></td>
          <td class="paramtype">(id&lt;<a class="el" href="protocol_i_notification-p.html">INotification</a>&gt;)&nbsp;</td>
          <td class="paramname"> <em>notification</em>          </td>
          <td>&nbsp;</td>
          <td><code> [implementation]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Notify <code><a class="el" href="interface_observer.html">Observer</a></code>s. <p>
This method is left public mostly for backward compatibility, and to allow you to send custom notification classes using the facade. <p>
Usually you should just call sendNotification and pass the parameters, never having to construct the notification yourself.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>notification</em>&nbsp;</td><td>the <code><a class="el" href="protocol_i_notification-p.html">INotification</a></code> to have the <code><a class="el" href="interface_view.html">View</a></code> notify <code>Observers</code> of. </td></tr>
  </table>
</dl>

<p>Reimplemented from <a class="el" href="protocol_i_facade-p.html#b4bc64c3f65650b8c2e3c7c558aee3f0">&lt; IFacade &gt;</a>.</p>

</div>
</div><p>
<a class="anchor" name="e1d4d017b64744de82d85e551ecfb340"></a><!-- doxytag: member="Facade::registerCommand:commandClassRef:" ref="e1d4d017b64744de82d85e551ecfb340" args="(NSString *notificationName,[commandClassRef] Class commandClassRef)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">- (void) registerCommand:           </td>
          <td></td>
          <td class="paramtype">(NSString *)&nbsp;</td>
          <td class="paramname"> <em>notificationName</em></td>
        </tr>
        <tr>
          <td class="paramkey">commandClassRef:</td>
          <td></td>
          <td class="paramtype">(Class)&nbsp;</td>
          <td class="paramname"> <em>commandClassRef</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td></td><td></td><td><code> [implementation]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Register an <code><a class="el" href="protocol_i_command-p.html">ICommand</a></code> with the <code><a class="el" href="interface_controller.html">Controller</a></code> by <a class="el" href="interface_notification.html">Notification</a> name.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>notificationName</em>&nbsp;</td><td>the name of the <code><a class="el" href="protocol_i_notification-p.html">INotification</a></code> to associate the <code><a class="el" href="protocol_i_command-p.html">ICommand</a></code> with </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>commandClassRef</em>&nbsp;</td><td>a reference to the Class of the <code><a class="el" href="protocol_i_command-p.html">ICommand</a></code> </td></tr>
  </table>
</dl>

<p>Reimplemented from <a class="el" href="protocol_i_facade-p.html#fe755a1aa43ebc7485444e3554b08fde">&lt; IFacade &gt;</a>.</p>

</div>
</div><p>
<a class="anchor" name="cb4b5c4222437ea76e720101d9cb12df"></a><!-- doxytag: member="Facade::registerMediator:" ref="cb4b5c4222437ea76e720101d9cb12df" args="(id&lt; IMediator &gt; mediator)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">- (void) registerMediator:           </td>
          <td></td>
          <td class="paramtype">(id&lt;<a class="el" href="protocol_i_mediator-p.html">IMediator</a>&gt;)&nbsp;</td>
          <td class="paramname"> <em>mediator</em>          </td>
          <td>&nbsp;</td>
          <td><code> [implementation]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Register a <code><a class="el" href="protocol_i_mediator-p.html">IMediator</a></code> with the <code><a class="el" href="interface_view.html">View</a></code>.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>mediator</em>&nbsp;</td><td>a reference to the <code><a class="el" href="protocol_i_mediator-p.html">IMediator</a></code> </td></tr>
  </table>
</dl>

<p>Reimplemented from <a class="el" href="protocol_i_facade-p.html#18705b8c63466fe28c30aff442270600">&lt; IFacade &gt;</a>.</p>

</div>
</div><p>
<a class="anchor" name="d08390fb9b60cc4d05dc85556be85767"></a><!-- doxytag: member="Facade::registerProxy:" ref="d08390fb9b60cc4d05dc85556be85767" args="(id&lt; IProxy &gt; proxy)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">- (void) registerProxy:           </td>
          <td></td>
          <td class="paramtype">(id&lt;<a class="el" href="protocol_i_proxy-p.html">IProxy</a>&gt;)&nbsp;</td>
          <td class="paramname"> <em>proxy</em>          </td>
          <td>&nbsp;</td>
          <td><code> [implementation]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Register an <code><a class="el" href="protocol_i_proxy-p.html">IProxy</a></code> with the <code><a class="el" href="interface_model.html">Model</a></code> by name.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>proxy</em>&nbsp;</td><td>the <code><a class="el" href="protocol_i_proxy-p.html">IProxy</a></code> instance to be registered with the <code><a class="el" href="interface_model.html">Model</a></code>. </td></tr>
  </table>
</dl>

<p>Reimplemented from <a class="el" href="protocol_i_facade-p.html#9e7d77c70627eaaf38bfbf87ff277cdb">&lt; IFacade &gt;</a>.</p>

</div>
</div><p>
<a class="anchor" name="ac5e7fb0acbdad2a75fbe19745f00676"></a><!-- doxytag: member="Facade::removeCommand:" ref="ac5e7fb0acbdad2a75fbe19745f00676" args="(NSString *notificationName)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">- (void) removeCommand:           </td>
          <td></td>
          <td class="paramtype">(NSString *)&nbsp;</td>
          <td class="paramname"> <em>notificationName</em>          </td>
          <td>&nbsp;</td>
          <td><code> [implementation]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Remove a previously registered <code><a class="el" href="protocol_i_command-p.html">ICommand</a></code> to <code><a class="el" href="protocol_i_notification-p.html">INotification</a></code> mapping from the <a class="el" href="interface_controller.html">Controller</a>.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>notificationName</em>&nbsp;</td><td>the name of the <code><a class="el" href="protocol_i_notification-p.html">INotification</a></code> to remove the <code><a class="el" href="protocol_i_command-p.html">ICommand</a></code> mapping for </td></tr>
  </table>
</dl>

<p>Reimplemented from <a class="el" href="protocol_i_facade-p.html#81e835e942a607a05b66556469f93744">&lt; IFacade &gt;</a>.</p>

</div>
</div><p>
<a class="anchor" name="1df21bff69bed012051b81fcb638119b"></a><!-- doxytag: member="Facade::removeMediator:" ref="1df21bff69bed012051b81fcb638119b" args="(NSString *mediatorName)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">- (id&lt; <a class="el" href="protocol_i_mediator-p.html">IMediator</a> &gt;) removeMediator:           </td>
          <td></td>
          <td class="paramtype">(NSString *)&nbsp;</td>
          <td class="paramname"> <em>mediatorName</em>          </td>
          <td>&nbsp;</td>
          <td><code> [implementation]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Remove an <code><a class="el" href="protocol_i_mediator-p.html">IMediator</a></code> from the <code><a class="el" href="interface_view.html">View</a></code>.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>mediatorName</em>&nbsp;</td><td>name of the <code><a class="el" href="protocol_i_mediator-p.html">IMediator</a></code> to be removed. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the <code><a class="el" href="protocol_i_mediator-p.html">IMediator</a></code> that was removed from the <code><a class="el" href="interface_view.html">View</a></code> </dd></dl>

<p>Reimplemented from <a class="el" href="protocol_i_facade-p.html#22a179fce9406464b348ce3ac0a11f95">&lt; IFacade &gt;</a>.</p>

</div>
</div><p>
<a class="anchor" name="8f32cc6b51ccfd15cf6a3951c3af7043"></a><!-- doxytag: member="Facade::removeProxy:" ref="8f32cc6b51ccfd15cf6a3951c3af7043" args="(NSString *proxyName)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">- (id&lt; <a class="el" href="protocol_i_proxy-p.html">IProxy</a> &gt;) removeProxy:           </td>
          <td></td>
          <td class="paramtype">(NSString *)&nbsp;</td>
          <td class="paramname"> <em>proxyName</em>          </td>
          <td>&nbsp;</td>
          <td><code> [implementation]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Remove an <code><a class="el" href="protocol_i_proxy-p.html">IProxy</a></code> from the <code><a class="el" href="interface_model.html">Model</a></code> by name.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>proxyName</em>&nbsp;</td><td>the <code><a class="el" href="protocol_i_proxy-p.html">IProxy</a></code> to remove from the <code><a class="el" href="interface_model.html">Model</a></code>. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the <code><a class="el" href="protocol_i_proxy-p.html">IProxy</a></code> that was removed from the <code><a class="el" href="interface_model.html">Model</a></code> </dd></dl>

<p>Reimplemented from <a class="el" href="protocol_i_facade-p.html#97b44975d8810b071b66c7a09c6c3426">&lt; IFacade &gt;</a>.</p>

</div>
</div><p>
<a class="anchor" name="86903ee1846ffa6851d2a874690a2230"></a><!-- doxytag: member="Facade::retrieveMediator:" ref="86903ee1846ffa6851d2a874690a2230" args="(NSString *mediatorName)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">- (id&lt; <a class="el" href="protocol_i_mediator-p.html">IMediator</a> &gt;) retrieveMediator:           </td>
          <td></td>
          <td class="paramtype">(NSString *)&nbsp;</td>
          <td class="paramname"> <em>mediatorName</em>          </td>
          <td>&nbsp;</td>
          <td><code> [implementation]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Retrieve an <code><a class="el" href="protocol_i_mediator-p.html">IMediator</a></code> from the <code><a class="el" href="interface_view.html">View</a></code>.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>mediatorName</em>&nbsp;</td><td></td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the <code><a class="el" href="protocol_i_mediator-p.html">IMediator</a></code> previously registered with the given <code>mediatorName</code>. </dd></dl>

<p>Reimplemented from <a class="el" href="protocol_i_facade-p.html#a0e07dbe5670d202b063708182006401">&lt; IFacade &gt;</a>.</p>

</div>
</div><p>
<a class="anchor" name="4d6b640aa7b65d22571ca8d6ffbf6c50"></a><!-- doxytag: member="Facade::retrieveProxy:" ref="4d6b640aa7b65d22571ca8d6ffbf6c50" args="(NSString *proxyName)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">- (id&lt; <a class="el" href="protocol_i_proxy-p.html">IProxy</a> &gt;) retrieveProxy:           </td>
          <td></td>
          <td class="paramtype">(NSString *)&nbsp;</td>
          <td class="paramname"> <em>proxyName</em>          </td>
          <td>&nbsp;</td>
          <td><code> [implementation]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Retrieve an <code><a class="el" href="protocol_i_proxy-p.html">IProxy</a></code> from the <code><a class="el" href="interface_model.html">Model</a></code> by name.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>proxyName</em>&nbsp;</td><td>the name of the proxy to be retrieved. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the <code><a class="el" href="protocol_i_proxy-p.html">IProxy</a></code> instance previously registered with the given <code>proxyName</code>. </dd></dl>

<p>Reimplemented from <a class="el" href="protocol_i_facade-p.html#707de2254b0ed6bf44e0f905a0b5a844">&lt; IFacade &gt;</a>.</p>

</div>
</div><p>
<a class="anchor" name="b2068fe1dd7fc7dedc28959a66ec0847"></a><!-- doxytag: member="Facade::sendNotification:body:type:" ref="b2068fe1dd7fc7dedc28959a66ec0847" args="(NSString *notificationName,[body] id body,[type] NSString *type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">- (void) sendNotification:           </td>
          <td></td>
          <td class="paramtype">(NSString *)&nbsp;</td>
          <td class="paramname"> <em>notificationName</em></td>
        </tr>
        <tr>
          <td class="paramkey">body:</td>
          <td></td>
          <td class="paramtype">(id)&nbsp;</td>
          <td class="paramname"> <em>body</em></td>
        </tr>
        <tr>
          <td class="paramkey">type:</td>
          <td></td>
          <td class="paramtype">(NSString *)&nbsp;</td>
          <td class="paramname"> <em>type</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td></td><td></td><td><code> [implementation]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Create and send an <code><a class="el" href="protocol_i_notification-p.html">INotification</a></code>.<p>
Keeps us from having to construct new notification instances in our implementation code. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>notificationName</em>&nbsp;</td><td>the name of the notiification to send </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>body</em>&nbsp;</td><td>the body of the notification </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>type</em>&nbsp;</td><td>the type of the notification </td></tr>
  </table>
</dl>

<p>Reimplemented from <a class="el" href="protocol_i_facade-p.html#66eb3304e55bd4ed817e8929bed51ede">&lt; IFacade &gt;</a>.</p>

</div>
</div><p>
</div>
<hr size="1"><address style="text-align: right;"><small>Generated on Wed Dec 24 14:19:08 2008 for PureMVC Objective-C by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.7.1 </small></address>
</body>
</html>
